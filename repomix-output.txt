This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-13T14:49:46.257Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
client/.gitignore
client/config-overrides.js
client/package.json
client/public/index.html
client/public/manifest.json
client/public/robots.txt
client/README.md
client/repomix-output.txt
client/src/App.css
client/src/App.js
client/src/App.test.js
client/src/components/FutureTournaments.css
client/src/components/FutureTournaments.js
client/src/components/Home.css
client/src/components/Home.js
client/src/components/Login.css
client/src/components/Login.js
client/src/components/Navbar.css
client/src/components/Navbar.js
client/src/components/PastResults.css
client/src/components/PastResults.js
client/src/components/Signup.css
client/src/components/Signup.js
client/src/context/UserContext.js
client/src/index.css
client/src/index.js
client/src/logo.svg
client/src/reportWebVitals.js
client/src/setupTests.js
db/db.js
db/run-setup.js
db/test.sql
hash-passwords.js
package.json
server.js
setup.sql

================================================================
Repository Files
================================================================

================
File: .gitignore
================
.env

================
File: client/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: client/config-overrides.js
================
const path = require('path');

module.exports = function override(config, env) {
  // ✅ Prevent locked file issues (cross-platform compatible)
  if (config.watchOptions) {
    config.watchOptions.ignored = [
      '**/node_modules',
      '**/build',
      '**/public',
      '**/.git',
    ];
  }

  // ✅ Add custom aliases for cleaner imports
  config.resolve = {
    ...config.resolve,
    alias: {
      '@components': path.resolve(__dirname, 'src/components'),
      '@utils': path.resolve(__dirname, 'src/utils'),
    },
  };

  // ✅ Adjust Webpack Dev Server (only in development mode)
  if (env === 'development') {
    config.devServer = {
      ...config.devServer,
      port: 3001,
      proxy: {
        '/api': {
          target: 'http://localhost:5000',
          changeOrigin: true,
        },
      },
    };
  }

  return config;
};

================
File: client/package.json
================
{
  "name": "moneymatch-frontend",
  "version": "1.0.0",
  "private": true,
  "proxy": "http://localhost:5000",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.28.0",
    "react-select": "^5.9.0"
  },
  "resolutions": {
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-app-rewired eject"
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "react-app-rewired": "^2.2.1",
    "react-scripts": "^5.0.1"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: client/public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Money Match</title>
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
</head>
<body>
  <div id="root"></div>
</body>
</html>

================
File: client/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: client/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: client/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3001](http://localhost:3001) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: client/repomix-output.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-13T14:49:08.212Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
config-overrides.js
package.json
public/index.html
public/manifest.json
public/robots.txt
README.md
src/App.css
src/App.js
src/App.test.js
src/components/FutureTournaments.css
src/components/FutureTournaments.js
src/components/Home.css
src/components/Home.js
src/components/Login.css
src/components/Login.js
src/components/Navbar.css
src/components/Navbar.js
src/components/PastResults.css
src/components/PastResults.js
src/components/Signup.css
src/components/Signup.js
src/context/UserContext.js
src/index.css
src/index.js
src/logo.svg
src/reportWebVitals.js
src/setupTests.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: config-overrides.js
================
const path = require('path');

module.exports = function override(config, env) {
  // ✅ Prevent locked file issues (cross-platform compatible)
  if (config.watchOptions) {
    config.watchOptions.ignored = [
      '**/node_modules',
      '**/build',
      '**/public',
      '**/.git',
    ];
  }

  // ✅ Add custom aliases for cleaner imports
  config.resolve = {
    ...config.resolve,
    alias: {
      '@components': path.resolve(__dirname, 'src/components'),
      '@utils': path.resolve(__dirname, 'src/utils'),
    },
  };

  // ✅ Adjust Webpack Dev Server (only in development mode)
  if (env === 'development') {
    config.devServer = {
      ...config.devServer,
      port: 3001,
      proxy: {
        '/api': {
          target: 'http://localhost:5000',
          changeOrigin: true,
        },
      },
    };
  }

  return config;
};

================
File: package.json
================
{
  "name": "moneymatch-frontend",
  "version": "1.0.0",
  "private": true,
  "proxy": "http://localhost:5000",
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.28.0",
    "react-select": "^5.9.0"
  },
  "resolutions": {
    "react": "18.2.0",
    "react-dom": "18.2.0"
  },
  "scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "react-app-rewired test",
    "eject": "react-app-rewired eject"
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "react-app-rewired": "^2.2.1",
    "react-scripts": "^5.0.1"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: public/index.html
================
<!DOCTYPE html>
<html lang="en">
<head>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Money Match</title>
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
</head>
<body>
  <div id="root"></div>
</body>
</html>

================
File: public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3001](http://localhost:3001) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: src/App.js
================
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './components/Home';
import FutureTournaments from './components/FutureTournaments';
import PastResults from './components/PastResults';
import Login from './components/Login';
import Signup from './components/Signup';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('authToken'));

  return (
    <Router>
      <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={isLoggedIn ? <Navigate to="/" /> : <Login setIsLoggedIn={setIsLoggedIn} />} />
        <Route path="/signup" element={<Signup />} />
        <Route
          path="/past-results"
          element={isLoggedIn ? <PastResults /> : <Navigate to="/login" />}
        />
        <Route
          path="/future-tournaments"
          element={isLoggedIn ? <FutureTournaments /> : <Navigate to="/login" />}
        />
      </Routes>
    </Router>
  );
}

export default App;

================
File: src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: src/components/FutureTournaments.css
================
/* FutureTournaments.css */

/* Container Styling */
.future-tournaments-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

/* Header Styling */
h1 {
  text-align: center;
  color: #2c3e50;
  font-size: 32px;
  margin-bottom: 20px;
}

/* Tournament Section */
.tournament {
  background-color: #fff;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

.tournament h2 {
  color: #4caf50;
  font-size: 24px;
  margin-bottom: 10px;
}

.tournament p {
  color: #34495e;
  font-size: 16px;
  margin: 5px 0;
}

/* Game Section Styling */
.game-section {
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
}

.game-section h3 {
  font-size: 20px;
  margin-bottom: 10px;
  color: #2c3e50;
  font-weight: 600;
  text-transform: uppercase;
}

/* Tournament Table */
.tournament-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

.tournament-table th,
.tournament-table td {
  text-align: center;
  padding: 10px;
  border: 1px solid #ddd;
  font-size: 14px;
}

.tournament-table th {
  background-color: #004d00;
  color: white;
  font-weight: bold;
  text-transform: uppercase;
}

.tournament-table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.tournament-table tr:hover {
  background-color: #eaf2f8;
}

/* Input Fields for Bet Amounts */
.tournament-table input[type="number"] {
  width: 80px;
  padding: 5px;
  text-align: right;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

/* Submit Bet Button */
.submit-bet-button {
  display: inline-block;
  margin-top: 15px;
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  text-transform: uppercase;
  font-weight: bold;
}

.submit-bet-button:hover {
  background-color: #45a049;
}

/* Error Message */
.error-message {
  text-align: center;
  color: #e74c3c;
  font-size: 16px;
  margin-top: 20px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .future-tournaments-container {
    padding: 15px;
  }

  h1 {
    font-size: 24px;
  }

  .tournament {
    padding: 15px;
  }

  .tournament h2 {
    font-size: 20px;
  }

  .game-section {
    padding: 10px;
  }

  .game-section h3 {
    font-size: 18px;
  }

  .tournament-table th,
  .tournament-table td {
    font-size: 12px;
    padding: 8px;
  }

  .tournament-table input[type="number"] {
    width: 60px;
    font-size: 12px;
  }

  .submit-bet-button {
    width: 100%;
    text-align: center;
  }
}

/* React-Select Dropdown Styling */
.react-select__control {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  border-radius: 4px;
  border: 1px solid #ccc;
  box-shadow: none;
}

.react-select__control:hover {
  border-color: #004d00;
}

.react-select__control--is-focused {
  border-color: #004d00;
  box-shadow: 0 0 0 2px #e6ffe6;
}

/* Dropdown Menu */
.react-select__menu {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  z-index: 9999;
}

.react-select__menu-list {
  padding: 0;
}

.react-select__option {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  padding: 8px 12px;
  cursor: pointer;
  background-color: #fff;
  color: #333;
}

.react-select__option--is-focused {
  background-color: #f0f8ff;
  color: #004d00;
}

.react-select__option--is-selected {
  background-color: #004d00;
  color: #fff;
}

/* Placeholder Text */
.react-select__placeholder {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  color: #999;
}

/* Single Selected Value */
.react-select__single-value {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  color: #333;
}

/* Dropdown Indicator */
.react-select__dropdown-indicator {
  color: #004d00;
}

.react-select__dropdown-indicator:hover {
  color: #002d00;
}

================
File: src/components/FutureTournaments.js
================
import React, { useEffect, useState } from 'react';
import './FutureTournaments.css';

const FutureTournaments = () => {
  const [tournaments, setTournaments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [bets, setBets] = useState({}); // Tracks selected players for bets
  const [betAmounts, setBetAmounts] = useState({}); // Tracks bet amounts for each player
  const [tournamentGames, setTournamentGames] = useState({});
  const [playerStats, setPlayerStats] = useState({}); // Tracks live odds and totals dynamically

  const userId = localStorage.getItem('userId');

  useEffect(() => {
    const fetchTournamentsAndBets = async () => {
      try {
        const [tournamentsResponse, betsResponse] = await Promise.all([
          fetch('/api/tournaments'),
          fetch(`/api/bets?userId=${userId}`)
        ]);
  
        if (!tournamentsResponse.ok || !betsResponse.ok) {
          throw new Error('Failed to fetch tournaments or bets.');
        }
  
        const tournamentsData = await tournamentsResponse.json();
        const betsData = await betsResponse.json();
  
        // Map bets to unique keys using tournamentId, gameId, and playerId
        const formattedBets = {};
        const formattedBetAmounts = {};
  
        betsData.forEach((bet) => {
          const key = `${bet.tournament_id}_${bet.game_id}_${bet.player_id}`;
          formattedBets[key] = bet.player_id;
          formattedBetAmounts[key] = bet.amount || '';
        });
  
        setTournaments(tournamentsData);
        setBets(formattedBets);
        setBetAmounts(formattedBetAmounts);
  
        // Fetch games for all tournaments
        const gameRequests = tournamentsData.map(async (tournament) => {
          const response = await fetch(`/api/tournament/${tournament.id}/games`);
          if (response.ok) {
            const gamesData = await response.json();
            return { tournamentId: tournament.id, games: gamesData };
          }
          return { tournamentId: tournament.id, games: [] };
        });
  
        const gameResults = await Promise.all(gameRequests);
        const updatedTournamentGames = {};
        gameResults.forEach(({ tournamentId, games }) => {
          updatedTournamentGames[tournamentId] = games;
        });
        setTournamentGames(updatedTournamentGames);
  
        // Fetch players for all games
        const playerRequests = gameResults.flatMap(({ tournamentId, games }) => 
          games.map(async (game) => {
            const response = await fetch(`/api/game/${tournamentId}/${game.game_id}/players`);
            if (response.ok) {
              const playersData = await response.json();
              return { key: `${tournamentId}_${game.game_id}`, players: playersData };
            }
            return { key: `${tournamentId}_${game.game_id}`, players: [] };
          })
        );
  
        const playerResults = await Promise.all(playerRequests);
        const updatedPlayerStats = {};
        playerResults.forEach(({ key, players }) => {
          updatedPlayerStats[key] = players;
        });
        setPlayerStats(updatedPlayerStats);
  
      } catch (err) {
        console.error('Error fetching tournaments, games, or players:', err.message);
        setError('Failed to load future tournaments, games, or players.');
      } finally {
        setLoading(false);
      }
    };
  
    fetchTournamentsAndBets();
  }, [userId]);
  

  // 📍 **Debugging State Changes**
useEffect(() => {
  console.log('Tournaments:', tournaments);
  console.log('Tournament Games:', tournamentGames);
  console.log('Player Stats:', playerStats);
}, [tournaments, tournamentGames, playerStats]);

  

  const calculatePayout = (amount, live_odds) => {
    return (amount * live_odds).toFixed(2);
  };

  const handleBetChange = async (tournamentId, gameId, playerId) => {
    const key = `${tournamentId}_${gameId}_${playerId}`;
    const amount = betAmounts[key] || 0;

    console.log('Sending Bet Payload:', {
      userId,
      tournamentId,
      gameId,
      playerId,
      amount,
    });

    try {
      const response = await fetch('/api/bets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          tournamentId,
          gameId,
          playerId,
          amount,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Failed to save bet: ${errorData.error || response.statusText}`);
      }

      console.log('Bet saved successfully');

      // Fetch updated live odds
      const updatedStatsResponse = await fetch(`/api/game/${tournamentId}/${gameId}/players`);
      if (updatedStatsResponse.ok) {
        const updatedStats = await updatedStatsResponse.json();
        setPlayerStats((prev) => ({
          ...prev,
          [`${tournamentId}_${gameId}`]: updatedStats,
        }));
      }
    } catch (err) {
      console.error('Error saving bet:', err.message);
      alert('Failed to save your bet. Please try again.');
    }
  };

  const handleBetAmountChange = (tournamentId, gameId, playerId, amount) => {
    const key = `${tournamentId}_${gameId}_${playerId}`;
    setBetAmounts((prev) => ({
      ...prev,
      [key]: amount.replace(/[^0-9.]/g, ''),
    }));
  };

  if (loading) return <p>Loading future tournaments...</p>;
  if (error) return <p className="error-message">{error}</p>;

  return (
    <div className="future-tournaments-container">
      <h1>Upcoming Tournaments</h1>
      {tournaments.map((tournament) => (
        <div key={tournament.id} className="tournament">
          <h2>{tournament.name}</h2>
          <p>
            <strong>Date:</strong> {new Date(tournament.date).toLocaleDateString()}
          </p>
          <p>
            <strong>Location:</strong> {tournament.location.city}, {tournament.location.country}
          </p>
  
          {tournamentGames[tournament.id]?.length > 0 ? (
            tournamentGames[tournament.id].map((game) => (
              <div key={game.game_id} className="game-section">
                <h3>{game.game_name}</h3>
                <table className="tournament-table">
                  <thead>
                    <tr>
                      <th>Player</th>
                      <th>Live Odds</th>
                      <th>Total Bets</th>
                      <th>Total Amount</th>
                      <th>Your Bet</th>
                      <th>Payout</th>
                    </tr>
                  </thead>
                  <tbody>
                    {playerStats[`${tournament.id}_${game.game_id}`]?.map((player) => {
                      const key = `${tournament.id}_${game.game_id}_${player.player_id}`;
                      const betAmount = betAmounts[key] || '';
  
                      return (
                        <tr key={player.player_id}>
                          <td>{player.player_name}</td>
                          <td>{player.live_odds?.toFixed(2)}</td>
                          <td>{player.total_bets || 0}</td>
                          <td>${player.total_amount || 0}</td>
                          <td>
                            <input
                              type="number"
                              value={betAmount}
                              onChange={(e) =>
                                handleBetAmountChange(
                                  tournament.id,
                                  game.game_id,
                                  player.player_id,
                                  e.target.value
                                )
                              }
                              onBlur={() =>
                                handleBetChange(
                                  tournament.id,
                                  game.game_id,
                                  player.player_id
                                )
                              }
                            />
                          </td>
                          <td>${calculatePayout(betAmount || 0, player.live_odds)}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            ))
          ) : (
            <p>No games available for this tournament.</p>
          )}
        </div>
      ))}
    </div>
  );
  
};

export default FutureTournaments;

================
File: src/components/Home.css
================
/* Bets List Container */
.bets-list-container {
  max-width: 900px;
  margin: 50px auto;
  padding: 20px;
  background-color: #ffffff;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  font-family: 'Poppins', sans-serif;
}

/* Bets Header */
.bets-list-container h1 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 28px;
  color: #004d00;
  font-weight: 700;
}

/* Bets Table */
.bets-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  font-size: 16px;
}

.bets-table thead {
  background-color: #004d00;
  color: white;
  font-weight: 600;
}

.bets-table th,
.bets-table td {
  padding: 12px 15px;
  text-align: center;
  border: 1px solid #ddd;
}

.bets-table tbody tr:nth-child(even) {
  background-color: #f9f9f9;
}

.bets-table tbody tr:hover {
  background-color: #e6ffe6;
  transition: background-color 0.3s ease-in-out;
}

/* Error Message */
.error-message {
  color: red;
  text-align: center;
  margin-top: 20px;
  font-size: 16px;
  font-weight: 500;
}

/* No Bets Message */
.bets-list-container p {
  text-align: center;
  font-size: 16px;
  color: #555;
  margin-top: 20px;
}

================
File: src/components/Home.js
================
import React, { useEffect, useState } from 'react';
import './Home.css';

const BetsList = () => {
  const [bets, setBets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const userId = localStorage.getItem('userId'); // Retrieve userId from LocalStorage

  useEffect(() => {
    const fetchBets = async () => {
      try {
        if (!userId) {
          throw new Error('User ID not found in LocalStorage. Please log in again.');
        }

        console.log('UserId from LocalStorage:', userId); // Debug

        const response = await fetch(`/api/bets?userId=${userId}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch bets: ${response.status}`);
        }
        const betsData = await response.json();
        console.log('Fetched Bets:', betsData);

        // Fetch additional details for tournaments, games, and players
        const [tournamentsResponse, gamesResponse, playersResponse] = await Promise.all([
          fetch('/api/tournaments'),
          fetch('/api/games'),
          fetch('/api/players'),
        ]);

        if (!tournamentsResponse.ok || !gamesResponse.ok || !playersResponse.ok) {
          throw new Error('Failed to fetch additional details.');
        }

        const tournaments = await tournamentsResponse.json();
        const games = await gamesResponse.json();
        const players = await playersResponse.json();

        console.log('Fetched Tournaments:', tournaments);
        console.log('Fetched Games:', games);
        console.log('Fetched Players:', players);

        if (!Array.isArray(tournaments) || !Array.isArray(games) || !Array.isArray(players)) {
          throw new Error('One of the additional API responses is not an array.');
        }

        // Map the bets with tournament, game, and player details
        const enrichedBets = betsData.map((bet) => ({
          ...bet,
          tournamentDate: tournaments.find((t) => t.id === bet.tournament_id)?.date || 'Unknown Date',
          tournamentName: tournaments.find((t) => t.id === bet.tournament_id)?.name || 'Unknown Tournament',
          tournamentCity: tournaments.find((t) => t.id === bet.tournament_id)?.location.city || 'Unknown Location',
          tournamentCountry: tournaments.find((t) => t.id === bet.tournament_id)?.location.country || 'Unknown Location',
          gameName: games.find((g) => g.id === bet.game_id)?.name || 'Unknown Game',
          playerName: players.find((p) => p.id === bet.player_id)?.name || 'Unknown Player',
        }));

        console.log('Enriched Bets:', enrichedBets);
        setBets(enrichedBets);
      } catch (err) {
        console.error('Error fetching bets:', err.message);
        setError('Failed to load your bets. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchBets();
  }, [userId]);

  useEffect(() => {
    console.log('Bets State:', bets); // Debug State Changes
  }, [bets]);

  if (loading) {
    return <p>Loading your bets...</p>;
  }

  if (error) {
    return <p className="error-message">{error}</p>;
  }

  // Calculate days remaining until the match
  const calculateDaysUntilMatch = (dateString) => {
    const today = new Date();
    const matchDate = new Date(dateString);
    const timeDifference = matchDate - today;
    const daysRemaining = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
    return daysRemaining >= 0 ? daysRemaining : 0; // Avoid negative values
  };
  
  return (
    <div className="bets-list-container">
      <h1>Welcome to Money Match</h1>
      <p>Your upcoming bets:</p>
      {bets.length === 0 ? (
        <p>No bets found. Start placing bets to see them here!</p>
      ) : (
        <table className="bets-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Tournament Name</th>
              <th>Location</th>
              <th>Game Name</th>
              <th>Player Name</th>
              <th>Bet Amount</th>
              <th>Outcome</th>
            </tr>
          </thead>
          <tbody>
            {bets.map((bet, index) => (
              <tr key={index}>
                <td>{bet.tournamentDate || 'Unknown Date'}</td>
                <td>{bet.tournamentName || 'Unknown Tournament'}</td>
                <td>{bet.tournamentCity + ', ' + bet.tournamentCountry || 'Unknown Location'}</td>
                <td>{bet.gameName || 'Unknown Game'}</td>
                <td>{bet.playerName || 'Unknown Player'}</td>
                <td>
                  ${Number(bet.amount || 0).toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td>
                  {bet.is_winner === 1 ? '✅ Win' : bet.is_winner === 0 ? '❌ Loss' : '🕒 Pending'}
                </td>              
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default BetsList;

================
File: src/components/Login.css
================
/* General Container */
.login-container {
  max-width: 400px;
  margin: 100px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
  text-align: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Input Fields */
.login-container input {
  width: 100%;
  margin: 10px 0;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
}

/* Submit Button */
.login-container button {
  width: 100%;
  padding: 10px;
  margin-top: 10px;
  background-color: #0078ff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.login-container button:hover {
  background-color: #005ecb;
}

/* Error Message */
.error-message {
  color: red;
  margin-top: 10px;
  font-size: 14px;
}

/* Signup Link */
.signup-link {
  margin-top: 20px;
  font-size: 14px;
  color: #555;
}

.signup-link p {
  margin: 0;
}

.signup-link a {
  color: #0078ff;
  text-decoration: none;
  font-weight: bold;
}

.signup-link a:hover {
  text-decoration: underline;
}

================
File: src/components/Login.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const Login = ({ setIsLoggedIn }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        localStorage.setItem('authToken', data.token);
        localStorage.setItem('userId', data.userId);
        localStorage.setItem('username', data.username); // Store username instead of userId
        setIsLoggedIn(true);
        navigate('/future-tournaments');
      } else {
        setError(data.error || 'Login failed.');
      }
    } catch (err) {
      console.error('Login error:', err);
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
      {error && <p className="error-message">{error}</p>}
    </div>
  );
};

export default Login;

================
File: src/components/Navbar.css
================
/* General Navbar Styling */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #004d00; /* Dark Green */
  color: #ffffff; /* White Text */
  font-family: 'Poppins', sans-serif;
  padding: 10px 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  position: sticky;
  top: 0;
  z-index: 1000;
}

/* Logo Section */
.navbar-logo img {
  height: 50px; /* Adjust if needed */
  width: auto;
  max-height: 50px;
  object-fit: contain;
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
}

.navbar-logo img:hover {
  transform: scale(1.1);
}

/* Navigation Links */
.navbar-links {
  list-style: none;
  display: flex;
  gap: 20px;
  margin: 0;
  padding: 0;
}

.navbar-links li {
  display: inline-block;
}

.navbar-links li a {
  color: #ffffff; /* White Text */
  text-decoration: none;
  font-size: 18px; /* Increased Font Size */
  font-weight: 600;
  transition: color 0.3s ease-in-out;
}

.navbar-links li a:hover {
  color: #ffd700; /* Gold Hover Effect */
}

/* Username Section */
.navbar-username {
  font-size: 14px;
  font-weight: 600;
  color: #ffffff;
  display: flex;
  align-items: center;
  gap: 10px;
}

/* Username Text */
.navbar-username span {
  font-size: 18px; /* Increased Font Size */
  color: #ffffff;
}

/* Logout Button */
.navbar-logout-button {
  background-color: #d9534f; /* Red Button */
  color: #ffffff;
  border: none;
  padding: 5px 10px;
  font-size: 16px; /* Slightly Increased Font Size */
  font-weight: bold;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.navbar-logout-button:hover {
  background-color: #c9302c; /* Darker Red */
}

/* Login Link */
.navbar-login-link {
  color: #ffffff;
  text-decoration: none;
  font-weight: 600;
  background-color: #333;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease-in-out;
}

.navbar-login-link:hover {
  background-color: #555;
}


/* Responsive Design */
@media (max-width: 768px) {
  .navbar {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px;
  }

  .navbar-links {
    flex-direction: column;
    gap: 10px;
    width: 100%;
    margin-bottom: 10px;
  }

  .navbar-links li a {
    font-size: 16px; /* Adjusted for smaller screens */
  }

  .navbar-username span {
    font-size: 16px; /* Adjusted for smaller screens */
  }

  .navbar-logout-button {
    font-size: 14px; /* Adjusted for smaller screens */
  }
}

================
File: src/components/Navbar.js
================
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import './Navbar.css';
import logo from '../assets/images/MoneyMatch.png';

const Navbar = ({ isLoggedIn }) => {
  const [userName, setUserName] = useState('');

  useEffect(() => {
    const storedUserName = localStorage.getItem('username');
    console.log('Stored Username:', storedUserName); // Debugging log

    if (storedUserName) {
      setUserName(storedUserName);
    }
  }, [isLoggedIn]);

  return (
    <nav className="navbar">
      {/* Logo Section */}
      <div className="navbar-logo">
        <Link to="/">
          <img
            src={logo}
            alt="Money Match Logo"
            className="navbar-logo-img"
          />
        </Link>
      </div>

      {/* Navigation Links */}
      <ul className="navbar-links">
        <li><Link to="/past-results">Past Results</Link></li>
        <li><Link to="/future-tournaments">Future Tournaments</Link></li>
      </ul>

      {/* Username Section */}
      <div className="navbar-username">
        {isLoggedIn ? (
          <>
            <span>Welcome, {userName || 'User'}</span>
            <button
              onClick={() => {
                localStorage.removeItem('authToken');
                localStorage.removeItem('username');
                window.location.href = '/login';
              }}
              className="navbar-logout-button"
            >
              Logout
            </button>
          </>
        ) : (
          <Link to="/login" className="navbar-login-link">Login</Link>
        )}
      </div>
    </nav>
  );
};

export default Navbar;

================
File: src/components/PastResults.css
================
/* PastResults.css */

.past-results-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  color: #2c3e50;
  font-size: 32px;
  margin-bottom: 20px;
}

table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

th,
td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

th {
  background-color: #4caf50;
  color: white;
  text-transform: uppercase;
  font-size: 14px;
}

td {
  color: #34495e;
  font-size: 14px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #eaf2f8;
}

.error-message {
  text-align: center;
  color: #e74c3c;
  font-size: 16px;
  margin-top: 20px;
}

p {
  text-align: center;
  color: #777;
  font-size: 16px;
}

@media (max-width: 768px) {
  th,
  td {
    font-size: 12px;
    padding: 8px;
  }

  h1 {
    text-align: center;
    font-size: 24px;
  }

  p {
    font-size: 14px;
  }
}

================
File: src/components/PastResults.js
================
import React, { useEffect, useState } from 'react';
import './PastResults.css';

const PastResults = () => {
  const [pastResults, setPastResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPastResults = async () => {
      try {
        const response = await fetch('/api/past-results');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        // Sort the data by descending date
        const sortedData = data.data.sort((a, b) => new Date(b.date) - new Date(a.date));

        setPastResults(sortedData);
      } catch (err) {
        console.error('Error fetching past results:', err);
        setError('Failed to load past results. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchPastResults();
  }, []);

  if (loading) {
    return <p>Loading past results...</p>;
  }

  if (error) {
    return <p className="error-message">{error}</p>;
  }

  return (
    <div className="past-results-container">
      <h1>Past Results</h1>
      {pastResults.length === 0 ? (
        <p>No past results available.</p>
      ) : (
        <table>
          <thead>
            <tr>
              <th>Tournament</th>
              <th>Location</th>
              <th>Date</th>
              <th>Game</th>
              <th>Winner</th>
              <th>Rounds</th>
              <th>Loser</th>
            </tr>
          </thead>
          <tbody>
            {pastResults.map((result) => (
              <tr key={result.id}>
                <td>{result.tournament}</td>
                <td>{`${result.city || 'Unknown'}, ${result.country || 'Unknown'}`}</td>
                <td>{new Date(result.date).toLocaleDateString()}</td>
                <td>{result.game}</td>
                <td>{result.winner}</td>
                <td>{`${result.winnerRoundsWon} : ${result.loserRoundsWon}`}</td>
                <td>{result.loser}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PastResults;

================
File: src/components/Signup.css
================
.signup-container {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.signup-container h1 {
  text-align: center;
  color: #333;
  margin-bottom: 20px;
}

.signup-container form {
  display: flex;
  flex-direction: column;
}

.signup-container label {
  margin-bottom: 5px;
  color: #555;
}

.signup-container input {
  margin-bottom: 15px;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.signup-container button {
  padding: 10px;
  font-size: 16px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.signup-container button:hover {
  background-color: #45a049;
}

.signup-container .error {
  color: red;
  font-size: 14px;
  text-align: center;
  margin-top: 10px;
}

.signup-container .success {
  color: green;
  font-size: 14px;
  text-align: center;
  margin-top: 10px;
}

================
File: src/components/Signup.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Signup.css';

const Signup = () => {
  const [form, setForm] = useState({ username: '', email: '', password: '' });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });

      const data = await response.json();

      if (response.ok) {
        setSuccess('Account created successfully! Redirecting to login...');
        setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds
      } else {
        setError(data.error || 'Failed to create account.');
      }
    } catch (err) {
      console.error('Signup error:', err);
      setError('An error occurred. Please try again later.');
    }
  };

  return (
    <div className="signup-container">
      <h1>Create an Account</h1>
      <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          name="username"
          value={form.username}
          onChange={handleChange}
          required
        />
        <label>Email:</label>
        <input
          type="email"
          name="email"
          value={form.email}
          onChange={handleChange}
          required
        />
        <label>Password:</label>
        <input
          type="password"
          name="password"
          value={form.password}
          onChange={handleChange}
          required
        />
        <button type="submit">Sign Up</button>
      </form>
      {error && <p className="error">{error}</p>}
      {success && <p className="success">{success}</p>}
    </div>
  );
};

export default Signup;

================
File: src/context/UserContext.js
================
import React, { createContext, useState, useEffect } from 'react';

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // Load user data from localStorage on app initialization
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // Save user data to localStorage whenever it changes
  useEffect(() => {
    if (user) {
      localStorage.setItem('user', JSON.stringify(user));
    } else {
      localStorage.removeItem('user'); // Clear localStorage on logout
    }
  }, [user]);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

================
File: src/index.css
================
.login-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  text-align: center;
}

.login-container input {
  width: 100%;
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.login-container button {
  width: 100%;
  padding: 10px;
  background-color: #0078ff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.error-message {
  color: red;
  margin-top: 10px;
}

================
File: src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { library } from '@fortawesome/fontawesome-svg-core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';

library.add(faEye, faEyeSlash);

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: client/src/App.css
================
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: client/src/App.js
================
import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import Navbar from './components/Navbar';
import Home from './components/Home';
import FutureTournaments from './components/FutureTournaments';
import PastResults from './components/PastResults';
import Login from './components/Login';
import Signup from './components/Signup';

function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem('authToken'));

  return (
    <Router>
      <Navbar isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/login" element={isLoggedIn ? <Navigate to="/" /> : <Login setIsLoggedIn={setIsLoggedIn} />} />
        <Route path="/signup" element={<Signup />} />
        <Route
          path="/past-results"
          element={isLoggedIn ? <PastResults /> : <Navigate to="/login" />}
        />
        <Route
          path="/future-tournaments"
          element={isLoggedIn ? <FutureTournaments /> : <Navigate to="/login" />}
        />
      </Routes>
    </Router>
  );
}

export default App;

================
File: client/src/App.test.js
================
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

================
File: client/src/components/FutureTournaments.css
================
/* FutureTournaments.css */

/* Container Styling */
.future-tournaments-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

/* Header Styling */
h1 {
  text-align: center;
  color: #2c3e50;
  font-size: 32px;
  margin-bottom: 20px;
}

/* Tournament Section */
.tournament {
  background-color: #fff;
  border-radius: 8px;
  padding: 20px;
  margin-bottom: 20px;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

.tournament h2 {
  color: #4caf50;
  font-size: 24px;
  margin-bottom: 10px;
}

.tournament p {
  color: #34495e;
  font-size: 16px;
  margin: 5px 0;
}

/* Game Section Styling */
.game-section {
  margin-top: 20px;
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
}

.game-section h3 {
  font-size: 20px;
  margin-bottom: 10px;
  color: #2c3e50;
  font-weight: 600;
  text-transform: uppercase;
}

/* Tournament Table */
.tournament-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

.tournament-table th,
.tournament-table td {
  text-align: center;
  padding: 10px;
  border: 1px solid #ddd;
  font-size: 14px;
}

.tournament-table th {
  background-color: #004d00;
  color: white;
  font-weight: bold;
  text-transform: uppercase;
}

.tournament-table tr:nth-child(even) {
  background-color: #f2f2f2;
}

.tournament-table tr:hover {
  background-color: #eaf2f8;
}

/* Input Fields for Bet Amounts */
.tournament-table input[type="number"] {
  width: 80px;
  padding: 5px;
  text-align: right;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 14px;
}

/* Submit Bet Button */
.submit-bet-button {
  display: inline-block;
  margin-top: 15px;
  padding: 10px 20px;
  background-color: #4caf50;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  text-transform: uppercase;
  font-weight: bold;
}

.submit-bet-button:hover {
  background-color: #45a049;
}

/* Error Message */
.error-message {
  text-align: center;
  color: #e74c3c;
  font-size: 16px;
  margin-top: 20px;
}

/* Responsive Design */
@media (max-width: 768px) {
  .future-tournaments-container {
    padding: 15px;
  }

  h1 {
    font-size: 24px;
  }

  .tournament {
    padding: 15px;
  }

  .tournament h2 {
    font-size: 20px;
  }

  .game-section {
    padding: 10px;
  }

  .game-section h3 {
    font-size: 18px;
  }

  .tournament-table th,
  .tournament-table td {
    font-size: 12px;
    padding: 8px;
  }

  .tournament-table input[type="number"] {
    width: 60px;
    font-size: 12px;
  }

  .submit-bet-button {
    width: 100%;
    text-align: center;
  }
}

/* React-Select Dropdown Styling */
.react-select__control {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  border-radius: 4px;
  border: 1px solid #ccc;
  box-shadow: none;
}

.react-select__control:hover {
  border-color: #004d00;
}

.react-select__control--is-focused {
  border-color: #004d00;
  box-shadow: 0 0 0 2px #e6ffe6;
}

/* Dropdown Menu */
.react-select__menu {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  z-index: 9999;
}

.react-select__menu-list {
  padding: 0;
}

.react-select__option {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  padding: 8px 12px;
  cursor: pointer;
  background-color: #fff;
  color: #333;
}

.react-select__option--is-focused {
  background-color: #f0f8ff;
  color: #004d00;
}

.react-select__option--is-selected {
  background-color: #004d00;
  color: #fff;
}

/* Placeholder Text */
.react-select__placeholder {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  color: #999;
}

/* Single Selected Value */
.react-select__single-value {
  font-family: 'Poppins', sans-serif;
  font-size: 14px;
  color: #333;
}

/* Dropdown Indicator */
.react-select__dropdown-indicator {
  color: #004d00;
}

.react-select__dropdown-indicator:hover {
  color: #002d00;
}

================
File: client/src/components/FutureTournaments.js
================
import React, { useEffect, useState } from 'react';
import './FutureTournaments.css';

const FutureTournaments = () => {
  const [tournaments, setTournaments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [bets, setBets] = useState({}); // Tracks selected players for bets
  const [betAmounts, setBetAmounts] = useState({}); // Tracks bet amounts for each player
  const [tournamentGames, setTournamentGames] = useState({});
  const [playerStats, setPlayerStats] = useState({}); // Tracks live odds and totals dynamically

  const userId = localStorage.getItem('userId');

  useEffect(() => {
    const fetchTournamentsAndBets = async () => {
      try {
        const [tournamentsResponse, betsResponse] = await Promise.all([
          fetch('/api/tournaments'),
          fetch(`/api/bets?userId=${userId}`)
        ]);
  
        if (!tournamentsResponse.ok || !betsResponse.ok) {
          throw new Error('Failed to fetch tournaments or bets.');
        }
  
        const tournamentsData = await tournamentsResponse.json();
        const betsData = await betsResponse.json();
  
        // Map bets to unique keys using tournamentId, gameId, and playerId
        const formattedBets = {};
        const formattedBetAmounts = {};
  
        betsData.forEach((bet) => {
          const key = `${bet.tournament_id}_${bet.game_id}_${bet.player_id}`;
          formattedBets[key] = bet.player_id;
          formattedBetAmounts[key] = bet.amount || '';
        });
  
        setTournaments(tournamentsData);
        setBets(formattedBets);
        setBetAmounts(formattedBetAmounts);
  
        // Fetch games for all tournaments
        const gameRequests = tournamentsData.map(async (tournament) => {
          const response = await fetch(`/api/tournament/${tournament.id}/games`);
          if (response.ok) {
            const gamesData = await response.json();
            return { tournamentId: tournament.id, games: gamesData };
          }
          return { tournamentId: tournament.id, games: [] };
        });
  
        const gameResults = await Promise.all(gameRequests);
        const updatedTournamentGames = {};
        gameResults.forEach(({ tournamentId, games }) => {
          updatedTournamentGames[tournamentId] = games;
        });
        setTournamentGames(updatedTournamentGames);
  
        // Fetch players for all games
        const playerRequests = gameResults.flatMap(({ tournamentId, games }) => 
          games.map(async (game) => {
            const response = await fetch(`/api/game/${tournamentId}/${game.game_id}/players`);
            if (response.ok) {
              const playersData = await response.json();
              return { key: `${tournamentId}_${game.game_id}`, players: playersData };
            }
            return { key: `${tournamentId}_${game.game_id}`, players: [] };
          })
        );
  
        const playerResults = await Promise.all(playerRequests);
        const updatedPlayerStats = {};
        playerResults.forEach(({ key, players }) => {
          updatedPlayerStats[key] = players;
        });
        setPlayerStats(updatedPlayerStats);
  
      } catch (err) {
        console.error('Error fetching tournaments, games, or players:', err.message);
        setError('Failed to load future tournaments, games, or players.');
      } finally {
        setLoading(false);
      }
    };
  
    fetchTournamentsAndBets();
  }, [userId]);
  

  // 📍 **Debugging State Changes**
useEffect(() => {
  console.log('Tournaments:', tournaments);
  console.log('Tournament Games:', tournamentGames);
  console.log('Player Stats:', playerStats);
}, [tournaments, tournamentGames, playerStats]);

  

  const calculatePayout = (amount, live_odds) => {
    return (amount * live_odds).toFixed(2);
  };

  const handleBetChange = async (tournamentId, gameId, playerId) => {
    const key = `${tournamentId}_${gameId}_${playerId}`;
    const amount = betAmounts[key] || 0;

    console.log('Sending Bet Payload:', {
      userId,
      tournamentId,
      gameId,
      playerId,
      amount,
    });

    try {
      const response = await fetch('/api/bets', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userId,
          tournamentId,
          gameId,
          playerId,
          amount,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Failed to save bet: ${errorData.error || response.statusText}`);
      }

      console.log('Bet saved successfully');

      // Fetch updated live odds
      const updatedStatsResponse = await fetch(`/api/game/${tournamentId}/${gameId}/players`);
      if (updatedStatsResponse.ok) {
        const updatedStats = await updatedStatsResponse.json();
        setPlayerStats((prev) => ({
          ...prev,
          [`${tournamentId}_${gameId}`]: updatedStats,
        }));
      }
    } catch (err) {
      console.error('Error saving bet:', err.message);
      alert('Failed to save your bet. Please try again.');
    }
  };

  const handleBetAmountChange = (tournamentId, gameId, playerId, amount) => {
    const key = `${tournamentId}_${gameId}_${playerId}`;
    setBetAmounts((prev) => ({
      ...prev,
      [key]: amount.replace(/[^0-9.]/g, ''),
    }));
  };

  if (loading) return <p>Loading future tournaments...</p>;
  if (error) return <p className="error-message">{error}</p>;

  return (
    <div className="future-tournaments-container">
      <h1>Upcoming Tournaments</h1>
      {tournaments.map((tournament) => (
        <div key={tournament.id} className="tournament">
          <h2>{tournament.name}</h2>
          <p>
            <strong>Date:</strong> {new Date(tournament.date).toLocaleDateString()}
          </p>
          <p>
            <strong>Location:</strong> {tournament.location.city}, {tournament.location.country}
          </p>
  
          {tournamentGames[tournament.id]?.length > 0 ? (
            tournamentGames[tournament.id].map((game) => (
              <div key={game.game_id} className="game-section">
                <h3>{game.game_name}</h3>
                <table className="tournament-table">
                  <thead>
                    <tr>
                      <th>Player</th>
                      <th>Live Odds</th>
                      <th>Total Bets</th>
                      <th>Total Amount</th>
                      <th>Your Bet</th>
                      <th>Payout</th>
                    </tr>
                  </thead>
                  <tbody>
                    {playerStats[`${tournament.id}_${game.game_id}`]?.map((player) => {
                      const key = `${tournament.id}_${game.game_id}_${player.player_id}`;
                      const betAmount = betAmounts[key] || '';
  
                      return (
                        <tr key={player.player_id}>
                          <td>{player.player_name}</td>
                          <td>{player.live_odds?.toFixed(2)}</td>
                          <td>{player.total_bets || 0}</td>
                          <td>${player.total_amount || 0}</td>
                          <td>
                            <input
                              type="number"
                              value={betAmount}
                              onChange={(e) =>
                                handleBetAmountChange(
                                  tournament.id,
                                  game.game_id,
                                  player.player_id,
                                  e.target.value
                                )
                              }
                              onBlur={() =>
                                handleBetChange(
                                  tournament.id,
                                  game.game_id,
                                  player.player_id
                                )
                              }
                            />
                          </td>
                          <td>${calculatePayout(betAmount || 0, player.live_odds)}</td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            ))
          ) : (
            <p>No games available for this tournament.</p>
          )}
        </div>
      ))}
    </div>
  );
  
};

export default FutureTournaments;

================
File: client/src/components/Home.css
================
/* Bets List Container */
.bets-list-container {
  max-width: 900px;
  margin: 50px auto;
  padding: 20px;
  background-color: #ffffff;
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  font-family: 'Poppins', sans-serif;
}

/* Bets Header */
.bets-list-container h1 {
  text-align: center;
  margin-bottom: 20px;
  font-size: 28px;
  color: #004d00;
  font-weight: 700;
}

/* Bets Table */
.bets-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
  font-size: 16px;
}

.bets-table thead {
  background-color: #004d00;
  color: white;
  font-weight: 600;
}

.bets-table th,
.bets-table td {
  padding: 12px 15px;
  text-align: center;
  border: 1px solid #ddd;
}

.bets-table tbody tr:nth-child(even) {
  background-color: #f9f9f9;
}

.bets-table tbody tr:hover {
  background-color: #e6ffe6;
  transition: background-color 0.3s ease-in-out;
}

/* Error Message */
.error-message {
  color: red;
  text-align: center;
  margin-top: 20px;
  font-size: 16px;
  font-weight: 500;
}

/* No Bets Message */
.bets-list-container p {
  text-align: center;
  font-size: 16px;
  color: #555;
  margin-top: 20px;
}

================
File: client/src/components/Home.js
================
import React, { useEffect, useState } from 'react';
import './Home.css';

const BetsList = () => {
  const [bets, setBets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const userId = localStorage.getItem('userId'); // Retrieve userId from LocalStorage

  useEffect(() => {
    const fetchBets = async () => {
      try {
        if (!userId) {
          throw new Error('User ID not found in LocalStorage. Please log in again.');
        }

        console.log('UserId from LocalStorage:', userId); // Debug

        const response = await fetch(`/api/bets?userId=${userId}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch bets: ${response.status}`);
        }
        const betsData = await response.json();
        console.log('Fetched Bets:', betsData);

        // Fetch additional details for tournaments, games, and players
        const [tournamentsResponse, gamesResponse, playersResponse] = await Promise.all([
          fetch('/api/tournaments'),
          fetch('/api/games'),
          fetch('/api/players'),
        ]);

        if (!tournamentsResponse.ok || !gamesResponse.ok || !playersResponse.ok) {
          throw new Error('Failed to fetch additional details.');
        }

        const tournaments = await tournamentsResponse.json();
        const games = await gamesResponse.json();
        const players = await playersResponse.json();

        console.log('Fetched Tournaments:', tournaments);
        console.log('Fetched Games:', games);
        console.log('Fetched Players:', players);

        if (!Array.isArray(tournaments) || !Array.isArray(games) || !Array.isArray(players)) {
          throw new Error('One of the additional API responses is not an array.');
        }

        // Map the bets with tournament, game, and player details
        const enrichedBets = betsData.map((bet) => ({
          ...bet,
          tournamentDate: tournaments.find((t) => t.id === bet.tournament_id)?.date || 'Unknown Date',
          tournamentName: tournaments.find((t) => t.id === bet.tournament_id)?.name || 'Unknown Tournament',
          tournamentCity: tournaments.find((t) => t.id === bet.tournament_id)?.location.city || 'Unknown Location',
          tournamentCountry: tournaments.find((t) => t.id === bet.tournament_id)?.location.country || 'Unknown Location',
          gameName: games.find((g) => g.id === bet.game_id)?.name || 'Unknown Game',
          playerName: players.find((p) => p.id === bet.player_id)?.name || 'Unknown Player',
        }));

        console.log('Enriched Bets:', enrichedBets);
        setBets(enrichedBets);
      } catch (err) {
        console.error('Error fetching bets:', err.message);
        setError('Failed to load your bets. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchBets();
  }, [userId]);

  useEffect(() => {
    console.log('Bets State:', bets); // Debug State Changes
  }, [bets]);

  if (loading) {
    return <p>Loading your bets...</p>;
  }

  if (error) {
    return <p className="error-message">{error}</p>;
  }

  // Calculate days remaining until the match
  const calculateDaysUntilMatch = (dateString) => {
    const today = new Date();
    const matchDate = new Date(dateString);
    const timeDifference = matchDate - today;
    const daysRemaining = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
    return daysRemaining >= 0 ? daysRemaining : 0; // Avoid negative values
  };
  
  return (
    <div className="bets-list-container">
      <h1>Welcome to Money Match</h1>
      <p>Your upcoming bets:</p>
      {bets.length === 0 ? (
        <p>No bets found. Start placing bets to see them here!</p>
      ) : (
        <table className="bets-table">
          <thead>
            <tr>
              <th>Date</th>
              <th>Tournament Name</th>
              <th>Location</th>
              <th>Game Name</th>
              <th>Player Name</th>
              <th>Bet Amount</th>
              <th>Outcome</th>
            </tr>
          </thead>
          <tbody>
            {bets.map((bet, index) => (
              <tr key={index}>
                <td>{bet.tournamentDate || 'Unknown Date'}</td>
                <td>{bet.tournamentName || 'Unknown Tournament'}</td>
                <td>{bet.tournamentCity + ', ' + bet.tournamentCountry || 'Unknown Location'}</td>
                <td>{bet.gameName || 'Unknown Game'}</td>
                <td>{bet.playerName || 'Unknown Player'}</td>
                <td>
                  ${Number(bet.amount || 0).toLocaleString(undefined, {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2,
                  })}
                </td>
                <td>
                  {bet.is_winner === 1 ? '✅ Win' : bet.is_winner === 0 ? '❌ Loss' : '🕒 Pending'}
                </td>              
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default BetsList;

================
File: client/src/components/Login.css
================
/* General Container */
.login-container {
  max-width: 400px;
  margin: 100px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background-color: #f9f9f9;
  text-align: center;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Input Fields */
.login-container input {
  width: 100%;
  margin: 10px 0;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 5px;
  font-size: 14px;
}

/* Submit Button */
.login-container button {
  width: 100%;
  padding: 10px;
  margin-top: 10px;
  background-color: #0078ff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.login-container button:hover {
  background-color: #005ecb;
}

/* Error Message */
.error-message {
  color: red;
  margin-top: 10px;
  font-size: 14px;
}

/* Signup Link */
.signup-link {
  margin-top: 20px;
  font-size: 14px;
  color: #555;
}

.signup-link p {
  margin: 0;
}

.signup-link a {
  color: #0078ff;
  text-decoration: none;
  font-weight: bold;
}

.signup-link a:hover {
  text-decoration: underline;
}

================
File: client/src/components/Login.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const Login = ({ setIsLoggedIn }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError('');

    try {
      const response = await fetch('/api/auth/login', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ email, password }),
      });

      const data = await response.json();

      if (response.ok) {
        localStorage.setItem('authToken', data.token);
        localStorage.setItem('userId', data.userId);
        localStorage.setItem('username', data.username); // Store username instead of userId
        setIsLoggedIn(true);
        navigate('/future-tournaments');
      } else {
        setError(data.error || 'Login failed.');
      }
    } catch (err) {
      console.error('Login error:', err);
      setError('An error occurred. Please try again.');
    }
  };

  return (
    <div className="login-container">
      <h2>Login</h2>
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Login</button>
      </form>
      {error && <p className="error-message">{error}</p>}
    </div>
  );
};

export default Login;

================
File: client/src/components/Navbar.css
================
/* General Navbar Styling */
.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #004d00; /* Dark Green */
  color: #ffffff; /* White Text */
  font-family: 'Poppins', sans-serif;
  padding: 10px 20px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  position: sticky;
  top: 0;
  z-index: 1000;
}

/* Logo Section */
.navbar-logo img {
  height: 50px; /* Adjust if needed */
  width: auto;
  max-height: 50px;
  object-fit: contain;
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
}

.navbar-logo img:hover {
  transform: scale(1.1);
}

/* Navigation Links */
.navbar-links {
  list-style: none;
  display: flex;
  gap: 20px;
  margin: 0;
  padding: 0;
}

.navbar-links li {
  display: inline-block;
}

.navbar-links li a {
  color: #ffffff; /* White Text */
  text-decoration: none;
  font-size: 18px; /* Increased Font Size */
  font-weight: 600;
  transition: color 0.3s ease-in-out;
}

.navbar-links li a:hover {
  color: #ffd700; /* Gold Hover Effect */
}

/* Username Section */
.navbar-username {
  font-size: 14px;
  font-weight: 600;
  color: #ffffff;
  display: flex;
  align-items: center;
  gap: 10px;
}

/* Username Text */
.navbar-username span {
  font-size: 18px; /* Increased Font Size */
  color: #ffffff;
}

/* Logout Button */
.navbar-logout-button {
  background-color: #d9534f; /* Red Button */
  color: #ffffff;
  border: none;
  padding: 5px 10px;
  font-size: 16px; /* Slightly Increased Font Size */
  font-weight: bold;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.navbar-logout-button:hover {
  background-color: #c9302c; /* Darker Red */
}

/* Login Link */
.navbar-login-link {
  color: #ffffff;
  text-decoration: none;
  font-weight: 600;
  background-color: #333;
  padding: 5px 10px;
  border-radius: 5px;
  transition: background-color 0.3s ease-in-out;
}

.navbar-login-link:hover {
  background-color: #555;
}


/* Responsive Design */
@media (max-width: 768px) {
  .navbar {
    flex-direction: column;
    align-items: flex-start;
    padding: 10px;
  }

  .navbar-links {
    flex-direction: column;
    gap: 10px;
    width: 100%;
    margin-bottom: 10px;
  }

  .navbar-links li a {
    font-size: 16px; /* Adjusted for smaller screens */
  }

  .navbar-username span {
    font-size: 16px; /* Adjusted for smaller screens */
  }

  .navbar-logout-button {
    font-size: 14px; /* Adjusted for smaller screens */
  }
}

================
File: client/src/components/Navbar.js
================
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import './Navbar.css';
import logo from '../assets/images/MoneyMatch.png';

const Navbar = ({ isLoggedIn }) => {
  const [userName, setUserName] = useState('');

  useEffect(() => {
    const storedUserName = localStorage.getItem('username');
    console.log('Stored Username:', storedUserName); // Debugging log

    if (storedUserName) {
      setUserName(storedUserName);
    }
  }, [isLoggedIn]);

  return (
    <nav className="navbar">
      {/* Logo Section */}
      <div className="navbar-logo">
        <Link to="/">
          <img
            src={logo}
            alt="Money Match Logo"
            className="navbar-logo-img"
          />
        </Link>
      </div>

      {/* Navigation Links */}
      <ul className="navbar-links">
        <li><Link to="/past-results">Past Results</Link></li>
        <li><Link to="/future-tournaments">Future Tournaments</Link></li>
      </ul>

      {/* Username Section */}
      <div className="navbar-username">
        {isLoggedIn ? (
          <>
            <span>Welcome, {userName || 'User'}</span>
            <button
              onClick={() => {
                localStorage.removeItem('authToken');
                localStorage.removeItem('username');
                window.location.href = '/login';
              }}
              className="navbar-logout-button"
            >
              Logout
            </button>
          </>
        ) : (
          <Link to="/login" className="navbar-login-link">Login</Link>
        )}
      </div>
    </nav>
  );
};

export default Navbar;

================
File: client/src/components/PastResults.css
================
/* PastResults.css */

.past-results-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: 'Arial', sans-serif;
  background-color: #f9f9f9;
  border-radius: 10px;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
}

h1 {
  text-align: center;
  color: #2c3e50;
  font-size: 32px;
  margin-bottom: 20px;
}

table {
  width: 100%;
  border-collapse: collapse;
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);
}

th,
td {
  padding: 12px 15px;
  text-align: left;
  border-bottom: 1px solid #ddd;
}

th {
  background-color: #4caf50;
  color: white;
  text-transform: uppercase;
  font-size: 14px;
}

td {
  color: #34495e;
  font-size: 14px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}

tr:hover {
  background-color: #eaf2f8;
}

.error-message {
  text-align: center;
  color: #e74c3c;
  font-size: 16px;
  margin-top: 20px;
}

p {
  text-align: center;
  color: #777;
  font-size: 16px;
}

@media (max-width: 768px) {
  th,
  td {
    font-size: 12px;
    padding: 8px;
  }

  h1 {
    text-align: center;
    font-size: 24px;
  }

  p {
    font-size: 14px;
  }
}

================
File: client/src/components/PastResults.js
================
import React, { useEffect, useState } from 'react';
import './PastResults.css';

const PastResults = () => {
  const [pastResults, setPastResults] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchPastResults = async () => {
      try {
        const response = await fetch('/api/past-results');
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();

        // Sort the data by descending date
        const sortedData = data.data.sort((a, b) => new Date(b.date) - new Date(a.date));

        setPastResults(sortedData);
      } catch (err) {
        console.error('Error fetching past results:', err);
        setError('Failed to load past results. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchPastResults();
  }, []);

  if (loading) {
    return <p>Loading past results...</p>;
  }

  if (error) {
    return <p className="error-message">{error}</p>;
  }

  return (
    <div className="past-results-container">
      <h1>Past Results</h1>
      {pastResults.length === 0 ? (
        <p>No past results available.</p>
      ) : (
        <table>
          <thead>
            <tr>
              <th>Tournament</th>
              <th>Location</th>
              <th>Date</th>
              <th>Game</th>
              <th>Winner</th>
              <th>Rounds</th>
              <th>Loser</th>
            </tr>
          </thead>
          <tbody>
            {pastResults.map((result) => (
              <tr key={result.id}>
                <td>{result.tournament}</td>
                <td>{`${result.city || 'Unknown'}, ${result.country || 'Unknown'}`}</td>
                <td>{new Date(result.date).toLocaleDateString()}</td>
                <td>{result.game}</td>
                <td>{result.winner}</td>
                <td>{`${result.winnerRoundsWon} : ${result.loserRoundsWon}`}</td>
                <td>{result.loser}</td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default PastResults;

================
File: client/src/components/Signup.css
================
.signup-container {
  max-width: 400px;
  margin: 0 auto;
  padding: 20px;
  font-family: Arial, sans-serif;
  background-color: #f9f9f9;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

.signup-container h1 {
  text-align: center;
  color: #333;
  margin-bottom: 20px;
}

.signup-container form {
  display: flex;
  flex-direction: column;
}

.signup-container label {
  margin-bottom: 5px;
  color: #555;
}

.signup-container input {
  margin-bottom: 15px;
  padding: 10px;
  font-size: 14px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.signup-container button {
  padding: 10px;
  font-size: 16px;
  background-color: #4caf50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.signup-container button:hover {
  background-color: #45a049;
}

.signup-container .error {
  color: red;
  font-size: 14px;
  text-align: center;
  margin-top: 10px;
}

.signup-container .success {
  color: green;
  font-size: 14px;
  text-align: center;
  margin-top: 10px;
}

================
File: client/src/components/Signup.js
================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Signup.css';

const Signup = () => {
  const [form, setForm] = useState({ username: '', email: '', password: '' });
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const navigate = useNavigate();

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setSuccess('');

    try {
      const response = await fetch('/api/auth/signup', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(form),
      });

      const data = await response.json();

      if (response.ok) {
        setSuccess('Account created successfully! Redirecting to login...');
        setTimeout(() => navigate('/login'), 3000); // Redirect after 3 seconds
      } else {
        setError(data.error || 'Failed to create account.');
      }
    } catch (err) {
      console.error('Signup error:', err);
      setError('An error occurred. Please try again later.');
    }
  };

  return (
    <div className="signup-container">
      <h1>Create an Account</h1>
      <form onSubmit={handleSubmit}>
        <label>Username:</label>
        <input
          type="text"
          name="username"
          value={form.username}
          onChange={handleChange}
          required
        />
        <label>Email:</label>
        <input
          type="email"
          name="email"
          value={form.email}
          onChange={handleChange}
          required
        />
        <label>Password:</label>
        <input
          type="password"
          name="password"
          value={form.password}
          onChange={handleChange}
          required
        />
        <button type="submit">Sign Up</button>
      </form>
      {error && <p className="error">{error}</p>}
      {success && <p className="success">{success}</p>}
    </div>
  );
};

export default Signup;

================
File: client/src/context/UserContext.js
================
import React, { createContext, useState, useEffect } from 'react';

export const UserContext = createContext();

export const UserProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  // Load user data from localStorage on app initialization
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  // Save user data to localStorage whenever it changes
  useEffect(() => {
    if (user) {
      localStorage.setItem('user', JSON.stringify(user));
    } else {
      localStorage.removeItem('user'); // Clear localStorage on logout
    }
  }, [user]);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
};

================
File: client/src/index.css
================
.login-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 5px;
  text-align: center;
}

.login-container input {
  width: 100%;
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.login-container button {
  width: 100%;
  padding: 10px;
  background-color: #0078ff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.error-message {
  color: red;
  margin-top: 10px;
}

================
File: client/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { library } from '@fortawesome/fontawesome-svg-core';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';

library.add(faEye, faEyeSlash);

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: client/src/logo.svg
================
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

================
File: client/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: client/src/setupTests.js
================
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

================
File: db/db.js
================
require('dotenv').config();
const sqlite3 = require('sqlite3').verbose();
const path = require('path');

// Resolve the database path from environment variables or use default
const dbPath = path.resolve(process.env.DATABASE_PATH || './database.db');

// Initialize the database connection
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('Error opening database:', err.message);
  } else {
    console.log(`Connected to the SQLite database at ${dbPath}`);
  }
});

// Promisify database methods for async/await
db.allAsync = (sql, params = []) =>
  new Promise((resolve, reject) => {
    db.all(sql, params, (err, rows) => {
      if (err) {
        console.error('Error executing query:', err.message);
        reject(err);
      } else {
        resolve(rows);
      }
    });
  });

db.runAsync = (sql, params = []) =>
  new Promise((resolve, reject) => {
    db.run(sql, params, function (err) {
      if (err) {
        console.error('Error running query:', err.message);
        reject(err);
      } else {
        resolve(this);
      }
    });
  });

db.getAsync = (sql, params = []) =>
  new Promise((resolve, reject) => {
    db.get(sql, params, (err, row) => {
      if (err) {
        console.error('Error fetching row:', err.message);
        reject(err);
      } else {
        resolve(row);
      }
    });
  });

db.closeAsync = () =>
  new Promise((resolve, reject) => {
    db.close((err) => {
      if (err) {
        console.error('Error closing the database:', err.message);
        reject(err);
      } else {
        console.log('Database connection closed.');
        resolve();
      }
    });
  });

module.exports = db;

================
File: db/run-setup.js
================
const sqlite3 = require('sqlite3').verbose();

// Connect to the SQLite database
const db = new sqlite3.Database('./database.db', (err) => {
  if (err) {
    console.error('Error opening database:', err.message);
  } else {
    console.log('Connected to the SQLite database.');
  }
});

// Function to initialize the database schema
const initializeDatabase = () => {
  // Create Users table
  db.run(`
    CREATE TABLE IF NOT EXISTS users (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      username TEXT UNIQUE NOT NULL,
      email TEXT UNIQUE NOT NULL,
      password TEXT NOT NULL
    );
  `, (err) => {
    if (err) {
      console.error('Error creating users table:', err.message);
    } else {
      console.log('Users table created or already exists.');
    }
  });

  // Create Matches table
  db.run(`
    CREATE TABLE IF NOT EXISTS matches (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT NOT NULL
    );
  `, (err) => {
    if (err) {
      console.error('Error creating matches table:', err.message);
    } else {
      console.log('Matches table created or already exists.');
    }
  });

  // Create Bets table
  db.run(`
    CREATE TABLE IF NOT EXISTS bets (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      match_id INTEGER NOT NULL,
      user_id INTEGER NOT NULL,
      amount REAL NOT NULL,
      FOREIGN KEY (match_id) REFERENCES matches (id),
      FOREIGN KEY (user_id) REFERENCES users (id)
    );
  `, (err) => {
    if (err) {
      console.error('Error creating bets table:', err.message);
    } else {
      console.log('Bets table created or already exists.');
    }
  });

  // Insert sample data
  insertSampleData();
};

// Function to insert sample data
const insertSampleData = () => {
  // Insert sample users
  const sampleUsers = [
    { username: 'user1', email: 'user1@example.com', password: 'hashedpassword1' },
    { username: 'user2', email: 'user2@example.com', password: 'hashedpassword2' },
  ];
  sampleUsers.forEach(({ username, email, password }) => {
    db.run(
      `INSERT OR IGNORE INTO users (username, email, password) VALUES (?, ?, ?)`,
      [username, email, password],
      (err) => {
        if (err) {
          console.error(`Error inserting user ${username}:`, err.message);
        }
      }
    );
  });

  // Insert sample matches
  const sampleMatches = [
    { name: 'Player1 vs Player2' },
    { name: 'Player3 vs Player4' },
  ];
  sampleMatches.forEach(({ name }) => {
    db.run(
      `INSERT OR IGNORE INTO matches (name) VALUES (?)`,
      [name],
      (err) => {
        if (err) {
          console.error(`Error inserting match ${name}:`, err.message);
        }
      }
    );
  });

  console.log('Sample data inserted.');
};

// Initialize the database and close the connection
initializeDatabase();

db.close((err) => {
  if (err) {
    console.error('Error closing the database connection:', err.message);
  } else {
    console.log('Database connection closed.');
  }
});

================
File: db/test.sql
================
SELECT * FROM users;
SELECT * FROM matches;
SELECT * FROM players;
SELECT * FROM games;
SELECT * FROM tournaments;
SELECT * FROM players_games_tournaments;
SELECT * FROM bets;

================
File: hash-passwords.js
================
const bcrypt = require('bcrypt');
const sqlite3 = require('sqlite3').verbose();

// Connect to the database
const db = new sqlite3.Database('./db/database.db');

// Fetch all users with plain text passwords
db.all('SELECT id, password FROM users', async (err, users) => {
  if (err) {
    console.error('Error fetching users:', err.message);
    process.exit(1);
  }

  for (const user of users) {
    // Skip if the password is already hashed
    if (user.password.startsWith('$2b$')) {
      console.log(`Password for user ID ${user.id} is already hashed.`);
      continue;
    }

    try {
      // Hash the password
      const hashedPassword = await bcrypt.hash(user.password, 10);

      // Update the user record with the hashed password
      db.run(
        'UPDATE users SET password = ? WHERE id = ?',
        [hashedPassword, user.id],
        (err) => {
          if (err) {
            console.error(`Error updating password for user ID ${user.id}:`, err.message);
          } else {
            console.log(`Password hashed successfully for user ID ${user.id}.`);
          }
        }
      );
    } catch (err) {
      console.error(`Error hashing password for user ID ${user.id}:`, err.message);
    }
  }

  console.log('Password hashing completed.');
  db.close();
});

================
File: package.json
================
{
  "name": "moneymatch-backend",
  "version": "1.0.0",
  "description": "Backend for the Money Match web application",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "@fortawesome/free-solid-svg-icons": "^6.7.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "bcrypt": "^5.1.1",
    "body-parser": "^1.20.2",
    "cors": "^2.8.5",
    "dotenv": "^16.1.4",
    "express": "^4.18.2",
    "express-validator": "^7.0.1",
    "jsonwebtoken": "^9.0.2",
    "react-router-dom": "^6.28.1",
    "react-select": "^5.9.0",
    "sqlite3": "^5.1.6"
  },
  "devDependencies": {
    "@babel/plugin-proposal-private-property-in-object": "^7.21.11",
    "nodemon": "^3.1.1"
  },
  "keywords": [
    "express",
    "sqlite3",
    "authentication",
    "backend",
    "moneymatch"
  ],
  "author": "Cliff Oliveira",
  "license": "MIT"
}

================
File: server.js
================
const express = require('express');
const path = require('path');
const bodyParser = require('body-parser');
const cors = require('cors');
const db = require('./db/db'); // Your database connection module
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const secretKey = 'your_secret_key'; // Use an environment variable in production
const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json()); // Parse JSON bodies
app.use(express.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(express.static(path.join(__dirname, 'client', 'build')));

// API Routes 
app.post('/api/auth/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const query = 'SELECT id, username, password FROM users WHERE email = ?';
    const user = await db.getAsync(query, [email]);

    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password.' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid email or password.' });
    }

    const token = jwt.sign({ id: user.id }, secretKey, { expiresIn: '1h' });

    res.status(200).json({
      message: 'Login successful',
      token,
      userId: user.id,
      username: user.username, // Ensure username is sent in the response
    });
  } catch (err) {
    console.error('Login error:', err.message);
    res.status(500).json({ error: 'Internal server error' });
  }
});


app.post('/api/auth/signup', async (req, res) => {
  const { username, email, password } = req.body;

  console.log('Incoming signup request:', { username, email });

  // Validate input
  if (!username || !email || !password) {
    return res.status(400).json({ error: 'All fields are required.' });
  }

  try {
    // Check if the email already exists
    const checkQuery = 'SELECT * FROM users WHERE email = ?';
    const existingUser = await db.getAsync(checkQuery, [email]);

    if (existingUser) {
      return res.status(409).json({ error: 'Email already in use.' });
    }

    // Hash the password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert the new user into the database
    const insertQuery = `
      INSERT INTO users (username, email, password)
      VALUES (?, ?, ?)
    `;
    const result = await db.runAsync(insertQuery, [username, email, hashedPassword]);

    console.log('User created successfully:', { id: result.lastID, username, email });

    res.status(201).json({
      message: 'Account created successfully',
      userId: result.lastID,
    });
  } catch (err) {
    console.error('Error creating user:', err.message, err.stack);
    res.status(500).json({ error: 'Failed to create account.' });
  }
});

app.get('/api/stats', async (req, res) => {
  try {
    const stats = {
      userCount: 100,
      activeMatches: 5,
    };
    res.json(stats);
  } catch (err) {
    console.error('Error fetching stats:', err.message);
    res.status(500).json({ error: 'Failed to fetch stats' });
  }
});

// Endpoint: Get past results
app.get('/api/past-results', async (req, res) => {
  try {
    const query = `
      SELECT 
        matches.id, 
        tournaments.name AS tournament, 
        tournaments.date, 
        tournaments.city AS city, 
        tournaments.country AS country, 
        games.name AS game, 
        player1.name AS winner, 
        player2.name AS loser, 
        matches.player1RoundsWon AS winnerRoundsWon, 
        matches.player2RoundsWon AS loserRoundsWon
      FROM matches
      JOIN players AS player1 ON matches.winner_id = player1.id
      JOIN players AS player2 ON matches.loser_id = player2.id
      JOIN tournaments ON matches.tournament_id = tournaments.id
      JOIN games ON matches.game_id = games.id
      WHERE tournaments.date < DATE('now')
      ORDER BY tournaments.date DESC;
    `;
    const results = await db.allAsync(query);
    res.json({ data: results });
  } catch (err) {
    console.error('Error fetching past results:', err.message, err.stack);
    res.status(500).json({ error: 'Failed to fetch past results.' });
  }
});


// Endpoint: Get future tournaments
app.get('/api/tournaments', async (req, res) => {
  try {
    const query = `
      SELECT 
        t.id AS tournament_id,
        t.name AS tournament_name,
        t.date,
        t.city,
        t.country,
        g.id AS game_id,
        g.name AS game_name,
        p.id AS player_id,
        p.name AS player_name
      FROM tournaments t
      LEFT JOIN players_games_tournaments pgt ON t.id = pgt.tournament_id
      LEFT JOIN games g ON pgt.game_id = g.id
      LEFT JOIN players p ON pgt.player_id = p.id
      WHERE t.date >= DATE('now')
      ORDER BY t.date ASC;
    `;
    const rows = await db.allAsync(query);

    const tournaments = rows.reduce((acc, row) => {
      const tournament = acc[row.tournament_id] || {
        id: row.tournament_id,
        name: row.tournament_name,
        date: row.date,
        location: { city: row.city, country: row.country },
        games: {},
      };

      if (row.game_id && row.game_name) {
        const game = tournament.games[row.game_id] || {
          id: row.game_id,
          name: row.game_name,
          players: [],
        };

        if (row.player_id && row.player_name) {
          game.players.push({ id: row.player_id, name: row.player_name });
        }

        tournament.games[row.game_id] = game;
      }

      acc[row.tournament_id] = tournament;
      return acc;
    }, {});

    res.json(Object.values(tournaments));
  } catch (err) {
    console.error('Error fetching tournaments:', err.message);
    res.status(500).json({ error: 'Failed to fetch tournaments.' });
  }
});


app.get('/api/tournament/:tournamentId/games', async (req, res) => {
  const { tournamentId } = req.params;

  try {
    console.log('Fetching games for tournamentId:', tournamentId);

    const games = await db.allAsync(
      `SELECT DISTINCT g.id AS game_id, g.name AS game_name 
       FROM games g
       JOIN players_games_tournaments pgt ON g.id = pgt.game_id
       WHERE pgt.tournament_id = ?`,
      [tournamentId]
    );

    if (!games || games.length === 0) {
      return res.status(404).json({ error: 'No games found for this tournament' });
    }

    console.log('Fetched Games:', games);
    res.status(200).json(games);
  } catch (err) {
    console.error('Error fetching tournament games:', err.message);
    res.status(500).json({ error: 'Failed to fetch tournament games', details: err.message });
  }
});


// Endpoint: Get games
app.get('/api/games', async (req, res) => {
  try {
    const games = await db.allAsync('SELECT * FROM games');
    res.json(Object.values(games));
  } catch (err) {
    console.error('Error fetching games:', err);
    res.status(500).json({ error: 'Failed to fetch games.' });
  }
});

app.get('/api/game/totals', async (req, res) => {
  const { tournamentId, gameId } = req.query;

  try {
    const totals = await db.allAsync(
      `SELECT 
          player_id,
          COUNT(*) AS total_bets,
          SUM(amount) AS total_amount
       FROM bets
       WHERE tournament_id = ? AND game_id = ?
       GROUP BY player_id`,
      [tournamentId, gameId]
    );

    res.status(200).json(totals);
  } catch (err) {
    console.error('Error fetching totals:', err.message);
    res.status(500).json({ error: 'Failed to fetch totals', details: err.message });
  }
});

// Endpoint: Get players
app.get('/api/players', async (req, res) => {
  try {
    const players = await db.allAsync('SELECT * FROM players');
    res.json(Object.values(players));
  } catch (err) {
    console.error('Error fetching players:', err);
    res.status(500).json({ error: 'Failed to fetch players.' });
  }
});

// ✅ GET /api/bets - Fetch user bets
app.get('/api/bets', async (req, res) => {
  const { userId } = req.query;

  try {
    const bets = await db.allAsync(
      `SELECT 
          tournament_id, 
          game_id, 
          player_id, 
          amount, 
          locked_odds 
       FROM bets 
       WHERE user_id = ?`,
      [userId]
    );

    res.status(200).json(bets);
  } catch (err) {
    console.error('Error fetching bets:', err.message);
    res.status(500).json({ error: 'Failed to fetch bets' });
  }
});


// Endpoint: Submit or Update a Bet
app.post('/api/bets', async (req, res) => {
  const { userId, tournamentId, gameId, playerId, amount } = req.body;

  console.log('Incoming Bet Payload:', {
    userId,
    tournamentId,
    gameId,
    playerId,
    amount,
  });

  try {
    if (!userId || !tournamentId || !gameId || !playerId || amount === undefined) {
      return res.status(400).json({ error: 'All fields are required.' });
    }

    // Fetch current live odds
    const oddsResult = await db.getAsync(
      `SELECT live_odds FROM players_games_tournaments 
       WHERE tournament_id = ? AND game_id = ? AND player_id = ?`,
      [tournamentId, gameId, playerId]
    );

    if (!oddsResult) {
      return res.status(400).json({ error: 'Player odds not found.' });
    }

    const { live_odds } = oddsResult;

    if (amount > 0) {
      // Insert or Update Bet
      await db.runAsync(
        `INSERT INTO bets (user_id, tournament_id, game_id, player_id, amount, locked_odds)
         VALUES (?, ?, ?, ?, ?, ?)
         ON CONFLICT(user_id, tournament_id, game_id, player_id)
         DO UPDATE SET amount = excluded.amount, locked_odds = excluded.locked_odds, updated_at = CURRENT_TIMESTAMP`,
        [userId, tournamentId, gameId, playerId, amount, live_odds]
      );
    } else {
      // Delete Bet
      await db.runAsync(
        `DELETE FROM bets 
         WHERE user_id = ? AND tournament_id = ? AND game_id = ? AND player_id = ?`,
        [userId, tournamentId, gameId, playerId]
      );
    }

    // Recalculate live odds for all players in the same game
    await db.runAsync(
      `UPDATE players_games_tournaments
       SET live_odds = CASE 
         WHEN (SELECT COALESCE(SUM(amount), 0) 
               FROM bets 
               WHERE tournament_id = players_games_tournaments.tournament_id 
                 AND game_id = players_games_tournaments.game_id) > 0 THEN 
           (SELECT SUM(amount) 
            FROM bets 
            WHERE tournament_id = players_games_tournaments.tournament_id 
              AND game_id = players_games_tournaments.game_id) 
           / (SELECT COALESCE(SUM(amount), 1) 
              FROM bets 
              WHERE tournament_id = players_games_tournaments.tournament_id 
                AND game_id = players_games_tournaments.game_id 
                AND player_id = players_games_tournaments.player_id)
           * 0.95
         ELSE 1.0
       END
       WHERE tournament_id = ? AND game_id = ?`,
      [tournamentId, gameId]
    );

    res.status(200).json({ message: 'Bet saved successfully' });
  } catch (err) {
    console.error('Error saving bet:', err.message);
    res.status(500).json({ error: 'Failed to save bet', details: err.message });
  }
});

// Endpoint: Fetch Dynamic Bet Details for a Game
app.get('/api/game/:tournamentId/:gameId/players', async (req, res) => {
  const { tournamentId, gameId } = req.params;

  try {
    const playersData = await db.allAsync(
      `SELECT 
          pgt.player_id,
          p.name AS player_name,
          pgt.live_odds,
          COALESCE(SUM(b.amount), 0) AS total_amount,
          COUNT(b.id) AS total_bets
       FROM players_games_tournaments pgt
       JOIN players p ON p.id = pgt.player_id
       LEFT JOIN bets b ON pgt.tournament_id = b.tournament_id 
                        AND pgt.game_id = b.game_id 
                        AND pgt.player_id = b.player_id
       WHERE pgt.tournament_id = ? AND pgt.game_id = ?
       GROUP BY pgt.player_id, p.name, pgt.live_odds`,
      [tournamentId, gameId]
    );

    res.status(200).json(playersData);
  } catch (err) {
    console.error('Error fetching game players:', err.message);
    res.status(500).json({ error: 'Failed to fetch players', details: err.message });
  }
});



app.delete('/api/bets', async (req, res) => {
  const { userId, tournamentId, gameId } = req.body;

  if (!userId || !tournamentId || !gameId) {
    return res.status(400).json({ error: 'Missing required fields: userId, tournamentId, or gameId' });
  }

  try {
    await db.runAsync(
      'DELETE FROM bets WHERE user_id = ? AND tournament_id = ? AND game_id = ?',
      [userId, tournamentId, gameId]
    );

    res.status(200).json({ message: 'Bet deleted successfully' });
  } catch (err) {
    console.error('Error deleting bet:', err.message);
    res.status(500).json({ error: 'Failed to delete bet' });
  }
});

app.post('/api/bets/outcome', async (req, res) => {
  const { userId, tournamentId, gameId, playerId, isWinner } = req.body;

  try {
    if (
      !userId ||
      !tournamentId ||
      !gameId ||
      !playerId ||
      (isWinner !== 0 && isWinner !== 1)
    ) {
      return res.status(400).json({ error: 'All fields are required, and isWinner must be 0 or 1.' });
    }

    await db.runAsync(
      `UPDATE bets 
       SET is_winner = ?,
           updated_at = CURRENT_TIMESTAMP
       WHERE user_id = ? AND tournament_id = ? AND game_id = ? AND player_id = ?`,
      [isWinner, userId, tournamentId, gameId, playerId]
    );

    res.status(200).json({ message: 'Bet outcome updated successfully' });
  } catch (err) {
    console.error('Error updating bet outcome:', err.message);
    res.status(500).json({ error: 'Failed to update bet outcome', details: err.message });
  }
});


// Catch-all route for React
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'client', 'build', 'index.html'));
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});

================
File: setup.sql
================
--PRAGMA foreign_keys = OFF;

-- Drop existing tables (use with caution in production)
DROP TABLE IF EXISTS users;
DROP TABLE IF EXISTS matches;
DROP TABLE IF EXISTS players;
DROP TABLE IF EXISTS games;
DROP TABLE IF EXISTS tournaments;
DROP TABLE IF EXISTS tournament_players
DROP TABLE IF EXISTS players_games_tournaments;
DROP TABLE IF EXISTS bets;

-- Create the 'users' table
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL
);

-- Create the 'matches' table
CREATE TABLE IF NOT EXISTS matches (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tournament_id INTEGER NOT NULL,
    game_id INTEGER NOT NULL,
    player1_id INTEGER NOT NULL,
    player2_id INTEGER NOT NULL,
    winner_id INTEGER NOT NULL,
    loser_id INTEGER NOT NULL,
    player1RoundsWon INTEGER NOT NULL,
    player2RoundsWon INTEGER NOT NULL,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE,
    FOREIGN KEY (player1_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player2_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (winner_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (loser_id) REFERENCES players(id) ON DELETE CASCADE
);

-- Create the 'players' table
CREATE TABLE IF NOT EXISTS players (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    country TEXT NOT NULL
);

-- Create the 'games' table
CREATE TABLE IF NOT EXISTS games (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE
);


-- Create the 'tournaments' table
CREATE TABLE IF NOT EXISTS tournaments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    date DATE NOT NULL,
    city TEXT NOT NULL,
    country TEXT NOT NULL
);

ALTER TABLE tournaments ADD COLUMN winner_id INTEGER DEFAULT NULL; -- ID of the winning player

CREATE TABLE IF NOT EXISTS players_games_tournaments (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tournament_id INTEGER NOT NULL,
    game_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    win_probability REAL DEFAULT 0.0,
    live_odds REAL DEFAULT 1.0,
    is_winner INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    UNIQUE (tournament_id, game_id, player_id) -- Ensure unique assignment
);

UPDATE players_games_tournaments
SET live_odds = CASE 
  WHEN total_amount > 0 THEN 
    (SELECT SUM(total_amount) 
     FROM players_games_tournaments 
     WHERE tournament_id = players_games_tournaments.tournament_id 
     AND game_id = players_games_tournaments.game_id) 
     / total_amount * 0.95
  ELSE 1.0
END
WHERE tournament_id = ? AND game_id = ?;


-- Create the 'bets' table
CREATE TABLE IF NOT EXISTS bets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    tournament_id INTEGER NOT NULL,
    game_id INTEGER NOT NULL,
    player_id INTEGER NOT NULL,
    amount REAL NOT NULL DEFAULT 0,
    odds REAL NOT NULL DEFAULT 1.0,
    is_winner INTEGER DEFAULT NULL, -- NULL = undecided, 1 = win, 0 = loss
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (game_id) REFERENCES games(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    UNIQUE (user_id, tournament_id, game_id, player_id)
);

-- Insert data into the 'users' table
INSERT INTO users (id, username, email, password) VALUES
(1, 'user1', 'user1@example.com', 'password1-hash'), -- Replace 'password1-hash' with a hashed password
(2, 'user2', 'user2@example.com', 'password2-hash'),
(3, 'user3', 'user3@example.com', 'password3-hash'),
(4, 'user4', 'user4@example.com', 'password4-hash'),
(5, 'admin', 'admin@example.com', 'admin-password-hash');

-- Insert data into the 'tournaments' table
INSERT INTO tournaments (id, name, date, city, country) VALUES
(1, 'EVO Japan 2023', '2023-03-31', 'Tokyo', 'Japan'),
(2, 'Combo Breaker 2023', '2023-05-26', 'Schaumburg', 'United States'),
(3, 'CEO 2023', '2023-06-23', 'Daytona Beach', 'United States'),
(4, 'EVO 2023', '2023-08-04', 'Las Vegas', 'United States'),
(5, 'Capcom Pro Tour Finals 2023', '2023-12-15', 'San Francisco', 'United States'),
(6, 'Frosty Faustings XVI', '2024-01-19', 'Chicago', 'United States'),
(7, 'EVO Japan 2024', '2024-03-29', 'Osaka', 'Japan'),
(8, 'Combo Breaker 2024', '2024-05-24', 'Schaumburg', 'United States'),
(9, 'CEO 2024', '2024-06-21', 'Daytona Beach', 'United States'),
(10, 'EVO 2024', '2024-08-02', 'Las Vegas', 'United States'),
(11, 'DreamHack Winter 2024', '2024-11-22', 'Jonkoping', 'Sweden'),
(12, 'Capcom Pro Tour Finals 2024', '2024-12-15', 'San Francisco', 'United States'),
(13, 'EVO Japan 2025', '2025-03-28', 'Tokyo', 'Japan'),
(14, 'Combo Breaker 2025', '2025-05-23', 'Schaumburg', 'United States'),
(15, 'CEO 2025', '2025-06-20', 'Daytona Beach', 'United States'),
(16, 'EVO 2025', '2025-08-01', 'Las Vegas', 'United States'),
(17, 'Red Bull Kumite 2025', '2025-10-05', 'Paris', 'France'),
(18, 'DreamHack Summer 2025', '2025-06-17', 'Jonkoping', 'Sweden'),
(19, 'Frosty Faustings XVII', '2025-01-18', 'Chicago', 'United States'),
(20, 'Capcom Pro Tour Finals 2025', '2025-12-12', 'San Francisco', 'United States'),
(21, 'EVO Japan 2025 Fall', '2025-10-10', 'Osaka', 'Japan'),
(22, 'Red Bull Kumite 2025 London', '2025-11-14', 'London', 'United Kingdom'),
(23, 'DreamHack Fall 2025', '2025-10-27', 'Jonkoping', 'Sweden'),
(24, 'Frosty Faustings XVIII', '2025-02-21', 'Chicago', 'United States');

-- Insert data into the 'games' table
INSERT INTO games (id, name) VALUES
(1, 'Street Fighter 6'),
(2, 'Tekken 8'),
(3, 'Guilty Gear Strive'),
(4, 'Dragon Ball FighterZ'),
(5, 'Mortal Kombat 1'),
(6, 'Super Smash Bros. Ultimate'),
(7, 'King of Fighters XV'),
(8, 'Granblue Fantasy: Versus'),
(9, 'Soulcalibur VI'),
(10, 'Samurai Shodown (2019)'),
(11, 'BlazBlue: Cross Tag Battle'),
(12, 'Melty Blood: Type Lumina'),
(13, 'Street Fighter V'),
(14, 'MultiVersus'),
(15, 'Under Night In-Birth Exe:Late[cl-r]'),
(16, 'Nickelodeon All-Star Brawl'),
(17, 'Virtua Fighter 5: Ultimate Showdown'),
(18, 'Power Rangers: Battle for the Grid');


-- Insert data into the 'players' table
INSERT INTO players (id, name, country) VALUES
(1, 'Tokedo', 'Japan'),
(2, 'Punk', 'United States'),
(3, 'Daigo', 'Japan'),
(4, 'Justin Wong', 'United States'),
(5, 'MenaRD', 'Dominican Republic'),
(6, 'Dual Kevin', 'United States'),
(7, 'Angry Bird', 'United Arab Emirates'),
(8, 'Big Bird', 'United Arab Emirates'),
(9, 'Fujimura', 'Japan'),
(10, 'Gachikun', 'Japan'),
(11, 'SonicFox', 'United States'),
(12, 'NuckleDu', 'United States'),
(13, 'Problem X', 'United Kingdom'),
(14, 'Phenom', 'Norway'),
(15, 'iDom', 'United States'),
(16, 'Luffy', 'France'),
(17, 'Go1', 'Japan'),
(18, 'Leffen', 'Sweden'),
(19, 'Arslan Ash', 'Pakistan'),
(20, 'Knee', 'South Korea');

-- Insert data into the 'matches' table
INSERT INTO matches (id, tournament_id, game_id, player1_id, player2_id, winner_id, loser_id, player1RoundsWon, player2RoundsWon) VALUES
(1, 1, 1, 1, 2, 1, 2, 3, 2),  -- Tokedo defeats Punk at EVO Japan 2023
(2, 1, 3, 2, 4, 3, 4, 4, 2),  -- Daigo defeats Justin Wong at EVO Japan 2023
(3, 2, 5, 1, 6, 5, 6, 3, 1),  -- MenaRD defeats Dual Kevin at Combo Breaker 2023
(4, 2, 7, 2, 8, 8, 7, 2, 3),  -- Big Bird defeats Angry Bird at Combo Breaker 2023
(5, 3, 1, 1, 3, 3, 1, 5, 3),  -- Daigo defeats Tokedo at CEO 2023
(6, 3, 2, 2, 4, 2, 4, 4, 1),  -- Punk defeats Justin Wong at CEO 2023
(7, 4, 7, 1, 6, 7, 6, 4, 2),  -- Angry Bird defeats Dual Kevin at EVO 2023
(8, 4, 5, 2, 8, 8, 5, 3, 2),  -- Big Bird defeats MenaRD at EVO 2023
(9, 5, 1, 1, 4, 4, 1, 5, 4),  -- Justin Wong defeats Tokedo at Capcom Pro Tour Finals 2023
(10, 5, 3, 2, 2, 2, 3, 4, 3), -- Punk defeats Daigo at Capcom Pro Tour Finals 2023
(11, 6, 7, 1, 5, 5, 7, 3, 1), -- MenaRD defeats Angry Bird at Frosty Faustings XVI
(12, 6, 6, 2, 8, 6, 8, 4, 3), -- Dual Kevin defeats Big Bird at Frosty Faustings XVI
(13, 7, 1, 1, 3, 1, 3, 4, 2), -- Tokedo defeats Daigo at EVO Japan 2024
(14, 7, 2, 2, 4, 4, 2, 5, 4), -- Justin Wong defeats Punk at EVO Japan 2024
(15, 8, 6, 1, 5, 6, 5, 3, 1), -- Dual Kevin defeats MenaRD at Combo Breaker 2024
(16, 8, 8, 2, 7, 7, 8, 4, 3), -- Angry Bird defeats Big Bird at Combo Breaker 2024
(17, 9, 3, 1, 4, 3, 4, 3, 2), -- Daigo defeats Justin Wong at CEO 2024
(18, 9, 2, 2, 1, 1, 2, 5, 4), -- Tokedo defeats Punk at CEO 2024
(19, 10, 7, 1, 8, 8, 7, 4, 3), -- Big Bird defeats Angry Bird at EVO 2024
(20, 10, 5, 2, 6, 6, 5, 3, 2); -- Dual Kevin defeats MenaRD at EVO 2024


INSERT INTO players_games_tournaments (tournament_id, game_id, player_id) VALUES
-- Tournament 1
(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), 
(1, 2, 5), (1, 2, 6), (1, 2, 7), (1, 2, 8), 
(1, 3, 9), (1, 3, 10), (1, 3, 11), (1, 3, 12), 
(1, 4, 13), (1, 4, 14), (1, 4, 15), (1, 4, 16), 

-- Tournament 2
(2, 1, 2), (2, 1, 3), (2, 1, 5), (2, 1, 6), 
(2, 2, 7), (2, 2, 8), (2, 2, 9), (2, 2, 10), 
(2, 3, 11), (2, 3, 12), (2, 3, 13), (2, 3, 14), 
(2, 4, 15), (2, 4, 16), (2, 4, 17), (2, 4, 18), 

-- Tournament 3
(3, 1, 3), (3, 1, 4), (3, 1, 7), (3, 1, 8), 
(3, 2, 9), (3, 2, 10), (3, 2, 13), (3, 2, 14), 
(3, 3, 15), (3, 3, 16), (3, 3, 1), (3, 3, 2), 
(3, 4, 3), (3, 4, 5), (3, 4, 6), (3, 4, 7), 

-- Tournament 4
(4, 1, 1), (4, 1, 2), (4, 1, 3), (4, 1, 4), 
(4, 2, 5), (4, 2, 6), (4, 2, 7), (4, 2, 8), 
(4, 3, 9), (4, 3, 10), (4, 3, 11), (4, 3, 12), 
(4, 4, 13), (4, 4, 14), (4, 4, 15), (4, 4, 16), 

-- Tournament 5
(5, 1, 1), (5, 1, 5), (5, 1, 9), (5, 1, 13), 
(5, 2, 2), (5, 2, 6), (5, 2, 10), (5, 2, 14), 
(5, 3, 3), (5, 3, 7), (5, 3, 11), (5, 3, 15), 
(5, 4, 4), (5, 4, 8), (5, 4, 12), (5, 4, 16), 

-- Tournament 6
(6, 1, 2), (6, 1, 6), (6, 1, 10), (6, 1, 14), 
(6, 2, 3), (6, 2, 7), (6, 2, 11), (6, 2, 15), 
(6, 3, 4), (6, 3, 8), (6, 3, 12), (6, 3, 16), 
(6, 4, 1), (6, 4, 5), (6, 4, 9), (6, 4, 13), 

-- Tournament 7
(7, 1, 3), (7, 1, 7), (7, 1, 11), (7, 1, 15), 
(7, 2, 4), (7, 2, 8), (7, 2, 12), (7, 2, 16), 
(7, 3, 1), (7, 3, 5), (7, 3, 9), (7, 3, 13), 
(7, 4, 2), (7, 4, 6), (7, 4, 10), (7, 4, 14), 

-- Tournament 8
(8, 1, 4), (8, 1, 8), (8, 1, 12), (8, 1, 16), 
(8, 2, 1), (8, 2, 5), (8, 2, 9), (8, 2, 13), 
(8, 3, 2), (8, 3, 6), (8, 3, 10), (8, 3, 14), 
(8, 4, 3), (8, 4, 7), (8, 4, 11), (8, 4, 15), 

-- Tournament 9
(9, 1, 1), (9, 1, 5), (9, 1, 9), (9, 1, 13), 
(9, 2, 2), (9, 2, 6), (9, 2, 10), (9, 2, 14), 
(9, 3, 3), (9, 3, 7), (9, 3, 11), (9, 3, 15), 
(9, 4, 4), (9, 4, 8), (9, 4, 12), (9, 4, 16), 

-- Tournament 10
(10, 1, 2), (10, 1, 6), (10, 1, 10), (10, 1, 14), 
(10, 2, 3), (10, 2, 7), (10, 2, 11), (10, 2, 15), 
(10, 3, 4), (10, 3, 8), (10, 3, 12), (10, 3, 16), 
(10, 4, 1), (10, 4, 5), (10, 4, 9), (10, 4, 13),

-- Tournament 11
(11, 1, 2), (11, 1, 6), (11, 1, 10), (11, 1, 14), 
(11, 2, 3), (11, 2, 7), (11, 2, 11), (11, 2, 15), 
(11, 3, 4), (11, 3, 8), (11, 3, 12), (11, 3, 16), 
(11, 4, 1), (11, 4, 5), (11, 4, 9), (11, 4, 13),

-- Tournament 12
(12, 1, 2), (12, 1, 6), (12, 1, 10), (12, 1, 14), 
(12, 2, 3), (12, 2, 7), (12, 2, 11), (12, 2, 15), 
(12, 3, 4), (12, 3, 8), (12, 3, 12), (12, 3, 16), 
(12, 4, 1), (12, 4, 5), (12, 4, 9), (12, 4, 13),

-- Tournament 13
(13, 1, 2), (13, 1, 6), (13, 1, 10), (13, 1, 14), 
(13, 2, 3), (13, 2, 7), (13, 2, 11), (13, 2, 15), 
(13, 3, 4), (13, 3, 8), (13, 3, 12), (13, 3, 16), 
(13, 4, 1), (13, 4, 5), (13, 4, 9), (13, 4, 13),

-- Tournament 14
(14, 1, 2), (14, 1, 6), (14, 1, 10), (14, 1, 14), 
(14, 2, 3), (14, 2, 7), (14, 2, 11), (14, 2, 15), 
(14, 3, 4), (14, 3, 8), (14, 3, 12), (14, 3, 16), 
(14, 4, 1), (14, 4, 5), (14, 4, 9), (14, 4, 13),

-- Tournament 15
(15, 1, 2), (15, 1, 6), (15, 1, 10), (15, 1, 14), 
(15, 2, 3), (15, 2, 7), (15, 2, 11), (15, 2, 15), 
(15, 3, 4), (15, 3, 8), (15, 3, 12), (15, 3, 16), 
(15, 4, 1), (15, 4, 5), (15, 4, 9), (15, 4, 13),

-- Tournament 16
(16, 1, 2), (16, 1, 6), (16, 1, 10), (16, 1, 14), 
(16, 2, 3), (16, 2, 7), (16, 2, 11), (16, 2, 15), 
(16, 3, 4), (16, 3, 8), (16, 3, 12), (16, 3, 16), 
(16, 4, 1), (16, 4, 5), (16, 4, 9), (16, 4, 13),

-- Tournament 17
(17, 1, 2), (17, 1, 6), (17, 1, 10), (17, 1, 14), 
(17, 2, 3), (17, 2, 7), (17, 2, 11), (17, 2, 15), 
(17, 3, 4), (17, 3, 8), (17, 3, 12), (17, 3, 16), 
(17, 4, 1), (17, 4, 5), (17, 4, 9), (17, 4, 13),

-- Tournament 18
(18, 1, 2), (18, 1, 6), (18, 1, 10), (18, 1, 14), 
(18, 2, 3), (18, 2, 7), (18, 2, 11), (18, 2, 15), 
(18, 3, 4), (18, 3, 8), (18, 3, 12), (18, 3, 16), 
(18, 4, 1), (18, 4, 5), (18, 4, 9), (18, 4, 13),    

-- Tournament 19
(19, 1, 2), (19, 1, 6), (19, 1, 10), (19, 1, 14), 
(19, 2, 3), (19, 2, 7), (19, 2, 11), (19, 2, 15), 
(19, 3, 4), (19, 3, 8), (19, 3, 12), (19, 3, 16), 
(19, 4, 1), (19, 4, 5), (19, 4, 9), (19, 4, 13),

-- Tournament 20
(20, 1, 2), (20, 1, 6), (20, 1, 10), (20, 1, 14), 
(20, 2, 3), (20, 2, 7), (20, 2, 11), (20, 2, 15), 
(20, 3, 4), (20, 3, 8), (20, 3, 12), (20, 3, 16), 
(20, 4, 1), (20, 4, 5), (20, 4, 9), (20, 4, 13),

-- Tournament 21
(21, 1, 2), (21, 1, 6), (21, 1, 10), (21, 1, 14), 
(21, 2, 3), (21, 2, 7), (21, 2, 11), (21, 2, 15), 
(21, 3, 4), (21, 3, 8), (21, 3, 12), (21, 3, 16), 
(21, 4, 1), (21, 4, 5), (21, 4, 9), (21, 4, 13),

-- Tournament 22
(22, 1, 2), (22, 1, 6), (22, 1, 10), (22, 1, 14), 
(22, 2, 3), (22, 2, 7), (22, 2, 11), (22, 2, 15), 
(22, 3, 4), (22, 3, 8), (22, 3, 12), (22, 3, 16), 
(22, 4, 1), (22, 4, 5), (22, 4, 9), (22, 4, 13),

-- Tournament 23
(23, 1, 2), (23, 1, 6), (23, 1, 10), (23, 1, 14), 
(23, 2, 3), (23, 2, 7), (23, 2, 11), (23, 2, 15), 
(23, 3, 4), (23, 3, 8), (23, 3, 12), (23, 3, 16), 
(23, 4, 1), (23, 4, 5), (23, 4, 9), (23, 4, 13),

-- Tournament 24
(24, 1, 1), (24, 1, 2), (24, 1, 3), (24, 1, 4),
(24, 2, 5), (24, 2, 6), (24, 2, 7), (24, 2, 8),
(24, 3, 9), (24, 3, 10), (24, 3, 11), (24, 3, 12),
(24, 4, 13), (24, 4, 14), (24, 4, 15), (24, 4, 16);

-- Insert data into the 'bets' table
INSERT INTO bets (id, user_id, tournament_id, game_id, player_id, amount) VALUES
-- User 1 Bets
(1, 1, 1, 1, 1, 100), -- User 1 bets 100 on Tokedo in Street Fighter 6 at EVO Japan 2023
(2, 1, 2, 2, 6, 50),  -- User 1 bets 50 on Dual Kevin in Tekken 7 at Combo Breaker 2023

-- User 2 Bets
(3, 2, 1, 1, 2, 75),  -- User 2 bets 75 on Punk in Street Fighter 6 at EVO Japan 2023
(4, 2, 2, 2, 5, 60),  -- User 2 bets 60 on MenaRD in Tekken 7 at Combo Breaker 2023

-- User 3 Bets
(5, 3, 1, 1, 3, 200), -- User 3 bets 200 on Daigo in Street Fighter 6 at EVO Japan 2023
(6, 3, 3, 4, 8, 150), -- User 3 bets 150 on Big Bird in Dragon Ball FighterZ at CEO 2023

-- User 4 Bets
(7, 4, 3, 1, 4, 100), -- User 4 bets 100 on Justin Wong in Street Fighter 6 at CEO 2023
(8, 4, 4, 3, 7, 80);  -- User 4 bets 80 on Angry Bird in Guilty Gear Strive at EVO 2023

UPDATE bets SET odds = 1.5

-- Enable foreign key constraints
--PRAGMA foreign_keys = ON;
